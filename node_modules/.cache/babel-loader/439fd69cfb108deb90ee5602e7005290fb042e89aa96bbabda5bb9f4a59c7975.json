{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { Geolocation, GeolocationPosition, PermissionStatus } from '@capacitor/geolocation';\nexport const useLocationStore = defineStore('location', {\n  state: () => {\n    return {\n      permission: \"\",\n      location: null\n    };\n  },\n  getters: {\n    isPermitted: state => state.permission != \"denied\" ? true : false\n  },\n  actions: {\n    async initLocation() {\n      // await checkLocationPermission();\n\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n      const x = this.location;\n      const array = {\n        \"coords\": {\n          \"latitude\": x.coords.latitude,\n          \"longitude\": x.coords.longitude\n        }\n      };\n      this.location = array;\n    },\n    // Check for location permission on mount\n    async checkLocationPermission() {\n      const status = await Geolocation.checkPermissions();\n      this.permission = status;\n      if (status.location === 'denied') {\n        console.log('Location permission denied.');\n      } else if (status.location === 'granted') {\n        console.log('Location permission granted.');\n        this.getCurrentLocation();\n      } else {\n        console.log('Location permission not requested. Requesting permission now.');\n        this.requestLocationPermission();\n      }\n      this.getCurrentLocation();\n    },\n    // Request location permission\n    async requestLocationPermission() {\n      const status = await Geolocation.requestPermissions();\n      this.permission.value = status;\n      if (status.location === 'granted') {\n        console.log('Location permission granted.');\n        getCurrentLocation();\n      } else {\n        console.log('Location permission denied.');\n      }\n    },\n    // Get current location\n    async getCurrentLocation() {\n      const pos = await Geolocation.getCurrentPosition();\n      location.value = pos;\n    },\n    async successCallback(position) {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      location.value = position;\n      console.log(\"Latitude: \" + latitude + \" Longitude: \" + longitude);\n    },\n    async errorCallback(error) {\n      console.log(\"Unable to retrieve your location due to \" + error.code + \": \" + error.message);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","Geolocation","GeolocationPosition","PermissionStatus","useLocationStore","state","permission","location","getters","isPermitted","actions","initLocation","navigator","geolocation","getCurrentPosition","successCallback","errorCallback","console","log","x","array","coords","latitude","longitude","checkLocationPermission","status","checkPermissions","getCurrentLocation","requestLocationPermission","requestPermissions","value","pos","position","error","code","message"],"sources":["C:/Users/USER/Desktop/home/src/stores/location.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport {  Geolocation, GeolocationPosition, PermissionStatus  } from '@capacitor/geolocation';\r\n\r\nexport const useLocationStore = defineStore('location', {\r\n    state: () => {\r\n        return {\r\n            permission: \"\",\r\n            location: null,\r\n        }\r\n    },\r\n    getters: {\r\n        isPermitted: (state) => (state.permission != \"denied\" ? true : false),\r\n    },\r\n    actions: {\r\n        async initLocation() {\r\n            // await checkLocationPermission();\r\n\r\n            if (navigator.geolocation) {\r\n                await navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n            } else {\r\n                console.log(\"Geolocation is not supported by this browser.\");\r\n            }\r\n\r\n            const x = this.location;\r\n            const array = {\"coords\": {\"latitude\": x.coords.latitude, \"longitude\": x.coords.longitude}}\r\n            this.location = array;\r\n\r\n        },\r\n        // Check for location permission on mount\r\n        async checkLocationPermission () {\r\n            const status = await Geolocation.checkPermissions();\r\n\r\n            this.permission = status;\r\n\r\n            if (status.location === 'denied') {\r\n                console.log('Location permission denied.');\r\n            } else if (status.location === 'granted') {\r\n                console.log('Location permission granted.');\r\n                this.getCurrentLocation();\r\n            } else {\r\n                console.log('Location permission not requested. Requesting permission now.');\r\n                this.requestLocationPermission();\r\n            }\r\n\r\n            this.getCurrentLocation();\r\n        },\r\n\r\n        // Request location permission\r\n        async requestLocationPermission () {\r\n            const status = await Geolocation.requestPermissions();\r\n\r\n            this.permission.value = status;\r\n\r\n            if (status.location === 'granted') {\r\n                console.log('Location permission granted.');\r\n                getCurrentLocation();\r\n            } else {\r\n                console.log('Location permission denied.');\r\n            }\r\n        },\r\n\r\n        // Get current location\r\n        async getCurrentLocation () {\r\n        const pos = await Geolocation.getCurrentPosition();\r\n        location.value = pos;\r\n        },\r\n\r\n        async successCallback (position) {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            location.value = position;\r\n            console.log(\"Latitude: \" + latitude + \" Longitude: \" + longitude);\r\n        },\r\n\r\n        async errorCallback(error) {\r\n            console.log(\"Unable to retrieve your location due to \" + error.code + \": \" + error.message);\r\n        }\r\n    }\r\n})"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAAUC,WAAW,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAS,wBAAwB;AAE7F,OAAO,MAAMC,gBAAgB,GAAGJ,WAAW,CAAC,UAAU,EAAE;EACpDK,KAAK,EAAEA,CAAA,KAAM;IACT,OAAO;MACHC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,WAAW,EAAGJ,KAAK,IAAMA,KAAK,CAACC,UAAU,IAAI,QAAQ,GAAG,IAAI,GAAG;EACnE,CAAC;EACDI,OAAO,EAAE;IACL,MAAMC,YAAYA,CAAA,EAAG;MACjB;;MAEA,IAAIC,SAAS,CAACC,WAAW,EAAE;QACvB,MAAMD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACC,eAAe,EAAEC,aAAa,CAAC;MAClF,CAAC,MAAM;QACHC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;MAChE;MAEA,MAAMC,CAAC,GAAG,IAAI,CAACZ,QAAQ;MACvB,MAAMa,KAAK,GAAG;QAAC,QAAQ,EAAE;UAAC,UAAU,EAAED,CAAC,CAACE,MAAM,CAACC,QAAQ;UAAE,WAAW,EAAEH,CAAC,CAACE,MAAM,CAACE;QAAS;MAAC,CAAC;MAC1F,IAAI,CAAChB,QAAQ,GAAGa,KAAK;IAEzB,CAAC;IACD;IACA,MAAMI,uBAAuBA,CAAA,EAAI;MAC7B,MAAMC,MAAM,GAAG,MAAMxB,WAAW,CAACyB,gBAAgB,EAAE;MAEnD,IAAI,CAACpB,UAAU,GAAGmB,MAAM;MAExB,IAAIA,MAAM,CAAClB,QAAQ,KAAK,QAAQ,EAAE;QAC9BU,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC9C,CAAC,MAAM,IAAIO,MAAM,CAAClB,QAAQ,KAAK,SAAS,EAAE;QACtCU,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3C,IAAI,CAACS,kBAAkB,EAAE;MAC7B,CAAC,MAAM;QACHV,OAAO,CAACC,GAAG,CAAC,+DAA+D,CAAC;QAC5E,IAAI,CAACU,yBAAyB,EAAE;MACpC;MAEA,IAAI,CAACD,kBAAkB,EAAE;IAC7B,CAAC;IAED;IACA,MAAMC,yBAAyBA,CAAA,EAAI;MAC/B,MAAMH,MAAM,GAAG,MAAMxB,WAAW,CAAC4B,kBAAkB,EAAE;MAErD,IAAI,CAACvB,UAAU,CAACwB,KAAK,GAAGL,MAAM;MAE9B,IAAIA,MAAM,CAAClB,QAAQ,KAAK,SAAS,EAAE;QAC/BU,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3CS,kBAAkB,EAAE;MACxB,CAAC,MAAM;QACHV,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC9C;IACJ,CAAC;IAED;IACA,MAAMS,kBAAkBA,CAAA,EAAI;MAC5B,MAAMI,GAAG,GAAG,MAAM9B,WAAW,CAACa,kBAAkB,EAAE;MAClDP,QAAQ,CAACuB,KAAK,GAAGC,GAAG;IACpB,CAAC;IAED,MAAMhB,eAAeA,CAAEiB,QAAQ,EAAE;MAC7B,MAAMV,QAAQ,GAAGU,QAAQ,CAACX,MAAM,CAACC,QAAQ;MACzC,MAAMC,SAAS,GAAGS,QAAQ,CAACX,MAAM,CAACE,SAAS;MAC3ChB,QAAQ,CAACuB,KAAK,GAAGE,QAAQ;MACzBf,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGI,QAAQ,GAAG,cAAc,GAAGC,SAAS,CAAC;IACrE,CAAC;IAED,MAAMP,aAAaA,CAACiB,KAAK,EAAE;MACvBhB,OAAO,CAACC,GAAG,CAAC,0CAA0C,GAAGe,KAAK,CAACC,IAAI,GAAG,IAAI,GAAGD,KAAK,CAACE,OAAO,CAAC;IAC/F;EACJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}