{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { Geolocation, GeolocationPosition, PermissionStatus } from '@capacitor/geolocation';\nexport const useLocationStore = defineStore('location', {\n  state: () => {\n    return {\n      permission: \"\",\n      location: null\n    };\n  },\n  getters: {\n    isPermitted: state => state.location ? true : false\n  },\n  actions: {\n    async initLocation() {\n      await checkLocationPermission();\n\n      //For test ENV\n      // await this.getLocation();\n    },\n\n    getLocation() {\n      return new Promise((resolve, reject) => {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(this.successCallback, this.errorCallback);\n        } else {\n          this.permission = \"denied\";\n          console.log(\"Geolocation is not supported by this browser.\");\n        }\n      });\n    },\n    // Check for location permission on mount\n    async checkLocationPermission() {\n      const status = await Geolocation.checkPermissions();\n      this.permission = status;\n      if (status.location === 'denied') {\n        console.log('Location permission denied.');\n      } else if (status.location === 'granted') {\n        console.log('Location permission granted.');\n        this.getCurrentLocation();\n      } else {\n        console.log('Location permission not requested. Requesting permission now.');\n        this.requestLocationPermission();\n      }\n      this.getCurrentLocation();\n    },\n    // Request location permission\n    async requestLocationPermission() {\n      const status = await Geolocation.requestPermissions();\n      this.permission = status;\n      if (status.location === 'granted') {\n        console.log('Location permission granted.');\n        this.getCurrentLocation();\n      } else {\n        console.log('Location permission denied.');\n      }\n    },\n    // Get current location\n    async getCurrentLocation() {\n      const pos = await Geolocation.getCurrentPosition();\n      this.location = pos;\n    },\n    async successCallback(position) {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const array = {\n        \"coords\": {\n          \"latitude\": latitude,\n          \"longitude\": longitude\n        }\n      };\n      this.location = array;\n      console.log(\"Latitude: \" + latitude + \" Longitude: \" + longitude);\n    },\n    async errorCallback(error) {\n      this.permission = \"denied\";\n      console.log(\"Unable to retrieve your location due to \" + error.code + \": \" + error.message);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","Geolocation","GeolocationPosition","PermissionStatus","useLocationStore","state","permission","location","getters","isPermitted","actions","initLocation","checkLocationPermission","getLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","successCallback","errorCallback","console","log","status","checkPermissions","getCurrentLocation","requestLocationPermission","requestPermissions","pos","position","latitude","coords","longitude","array","error","code","message"],"sources":["C:/Users/USER/Desktop/home/src/stores/location.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport {  Geolocation, GeolocationPosition, PermissionStatus  } from '@capacitor/geolocation';\r\n\r\nexport const useLocationStore = defineStore('location', {\r\n    state: () => {\r\n        return {\r\n            permission: \"\",\r\n            location: null,\r\n        }\r\n    },\r\n    getters: {\r\n        isPermitted: (state) => (state.location ? true : false),\r\n    },\r\n    actions: {\r\n        async initLocation() {\r\n            await checkLocationPermission();\r\n\r\n            //For test ENV\r\n            // await this.getLocation();\r\n        },\r\n\r\n        getLocation(){\r\n            return new Promise((resolve, reject) => {\r\n\r\n                if (navigator.geolocation) {\r\n                    navigator.geolocation.getCurrentPosition(this.successCallback, this.errorCallback);\r\n                } else {\r\n                    this.permission = \"denied\"\r\n                    console.log(\"Geolocation is not supported by this browser.\");\r\n                }\r\n                \r\n            });\r\n        },\r\n        // Check for location permission on mount\r\n        async checkLocationPermission () {\r\n            const status = await Geolocation.checkPermissions();\r\n\r\n            this.permission = status;\r\n\r\n            if (status.location === 'denied') {\r\n                console.log('Location permission denied.');\r\n            } else if (status.location === 'granted') {\r\n                console.log('Location permission granted.');\r\n                this.getCurrentLocation();\r\n            } else {\r\n                console.log('Location permission not requested. Requesting permission now.');\r\n                this.requestLocationPermission();\r\n            }\r\n\r\n            this.getCurrentLocation();\r\n        },\r\n\r\n        // Request location permission\r\n        async requestLocationPermission () {\r\n            const status = await Geolocation.requestPermissions();\r\n\r\n            this.permission = status;\r\n\r\n            if (status.location === 'granted') {\r\n                console.log('Location permission granted.');\r\n                this.getCurrentLocation();\r\n            } else {\r\n                console.log('Location permission denied.');\r\n            }\r\n        },\r\n\r\n        // Get current location\r\n        async getCurrentLocation () {\r\n            const pos = await Geolocation.getCurrentPosition();\r\n            this.location = pos;\r\n        },\r\n\r\n        async successCallback (position) {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n\r\n            const array = {\"coords\": {\"latitude\": latitude, \"longitude\": longitude}}\r\n            this.location = array;\r\n            console.log(\"Latitude: \" + latitude + \" Longitude: \" + longitude);\r\n        },\r\n\r\n        async errorCallback(error) {\r\n            this.permission = \"denied\"\r\n            console.log(\"Unable to retrieve your location due to \" + error.code + \": \" + error.message);\r\n        }\r\n    }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}